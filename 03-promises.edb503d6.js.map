{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAE3BC,YAAW,KACVN,EACFI,EAAQ,C,SAAEN,EAAUS,MAAAR,IAEpBM,EAAO,C,SAAEP,EAAUS,MAAAR,GAAQ,GAEvBA,EAAM,G,CAIb,MAAMS,EAAOC,SAASC,cAAc,SAOpC,IAAIC,EA4CJ,SAASC,GAAUd,SAAEA,EAAUS,MAAAM,IAC7BlB,EAAAmB,OAAOC,QAAQ,uBAAqBjB,QAAiBe,M,CAGvD,SAASG,GAAQlB,SAAEA,EAAUS,MAAAU,IAC3BtB,EAAAmB,OAAOI,QAAQ,sBAAoBpB,QAAemB,M,CAnDpDT,EAAKW,iBAAiB,SAItB,SAAiBC,GACfA,EAAEC,iBAEF,MAAMC,EAASC,OAAOf,EAAKgB,SAASF,OAAOG,OACrCC,EAAaH,OAAOf,EAAKgB,SAASjB,MAAMkB,OACxCE,EAAOJ,OAAOf,EAAKgB,SAASG,KAAKF,OAEtC,IAAK,IAAIG,EAAI,EAAGA,GAAKN,EAAQM,IAElB,IAANA,EACFjB,EAAQe,EAGRf,GAASgB,EAGX9B,EAAc+B,EAAGjB,GAAOkB,KAAKjB,GAAWkB,MAAMd,GAE9CI,EAAEW,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n   \n    setTimeout(() => {\n if (shouldResolve) {\n   resolve({ position, delay })\n      } else {\n   reject({ position, delay })\n      }\n    }, delay)\n },);\n}; \n\nconst form = document.querySelector('.form');\n// const inputDelay = form.querySelector('input[name=delay]');\n// const inputStep = form.querySelector('input[name=step]');\n// const inputAmount = form.querySelector('input[name=amount]');\n\nform.addEventListener('click', onStart);\n\nlet delay;\n\nfunction onStart(e) {\n  e.preventDefault();\n\n  const amount = Number(form.elements.amount.value);\n  const firstDelay = Number(form.elements.delay.value);\n  const step = Number(form.elements.step.value);\n\n   for (let i = 1; i <= amount; i++) {\n\n    if (i === 1) {\n      delay = firstDelay;\n    }\n    else {\n      delay += step;\n    }\n    \n    createPromise(i, delay).then(onSuccess).catch(onError);\n\n    e.currentTarget.reset();\n  };\n\n\n  // const quantityProm = inputAmount.value;\n  // const delayCreateProm = inputDelay.value;\n  // const stepDelay = inputStep.value;\n\n\n  // for (let i = 1; i <= quantityProm; i++) {\n\n  //   if (i === 1) {\n  //     delay = Number(delayCreateProm);\n  //   }\n  //   else {\n  //     delay += Number(stepDelay);\n  //   }\n    \n  //   createPromise(i, delay).then(onSuccess).catch(onError);\n\n  //   e.currentTarget.reset();\n  // };\n}\n\nfunction onSuccess({ position, delay }) {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n};\n\nfunction onError({ position, delay }) {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  };\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","delay","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$onSuccess","delay2","Notify","success","$47d4ff9957288465$var$onError","delay3","failure","addEventListener","e","preventDefault","amount","Number","elements","value","firstDelay","step","i","then","catch","currentTarget","reset"],"version":3,"file":"03-promises.edb503d6.js.map"}